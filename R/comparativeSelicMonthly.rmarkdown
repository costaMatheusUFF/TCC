---
title: "Comparativo criptomoeda selic mensal"
format: html
editor: visual
execute: 
  echo: false
  warning: false
---


# comparativo taxa selic selic média mensal


```{r}
#| label: criptomoeda selic mensal

# pacotes ----
library(gt)
library(tidyverse)
library(quantmod)
library(scales)
library(PerformanceAnalytics)
library(openxlsx)
library(corrplot)
library(RColorBrewer)
library(knitr)
source("functions/allFunctions.R")
source("variaveis.R")

# alteração variavel

rfr = selic$SELICMENSALMedia
filePossibilites = paste0("Possibilities",rfr,".xlsx")
fullPathPossibilites = paste(folder,filePossibilites,sep = "/")

# codigo ----

asset_return = getPricesStockMarket(folder,symbols,from,to)

## portfolio igual  ----

w = 1/Nsymbols %>% rep(Nsymbols)

portfolio_return = Return.portfolio(asset_return,weights = w,rebalance_on = "months")
sd_portfolio = sd(portfolio_return$portfolio.returns)
mean_portfolio = mean(portfolio_return$portfolio.returns)
sr_portfolio = SharpeRatio(portfolio_return,Rf=rfr,FUN = "StdDev")

## portfolio optimizado ----

possibilities = loadPossibilites(filePossibilites,fullPathPossibilites,symbols,by)

min_var <- slice_min(possibilities,sd)
max_sr <- slice_max(possibilities,sharpeRatePortfolio)
max_re <- slice_max(possibilities,sharpeRatePortfolio)


bestCombination = slice_max(possibilities,sharpeRatePortfolio)
summaryBestCombination = bestCombination[which(bestCombination[1:Nsymbols] > 0)]



w = max_sr[1:Nsymbols] %>% unlist()

portfolio_return_opmitized = Return.portfolio(asset_return,
                                              weights = w,
                                              rebalance_on = "months")

sd_portfolio_optimized = sd(portfolio_return_opmitized$portfolio.returns)
mean_portfolio_optimized = mean(portfolio_return_opmitized$portfolio.returns)
sr_portfolio_optimized = max_sr$sharpeRatePortfolio


# graficos e tabelas ----


## optimização de portfolio e fronteira eficiente ----

pEficientFrontier_cryptocurrency = possibilities %>%
  ggplot(aes(x = sd, y = mean, color = sharpeRatePortfolio)) +
  geom_point() +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = scales::percent) +
  labs(x = 'Risco',
       y = 'Retorno esperado',
       title = "Optimização de portfolio & Fronteira eficiente",
       colour = "Indice sharpe") +
  geom_point(aes(x = sd,
                 y = mean), data = min_var, color = 'red') +
  geom_point(aes(x = sd,
                 y = mean), data = max_sr, color = 'red') +
  geom_text(x=min_var$sd, y = min_var$mean + .0002,label="Menor variancia", color = "red") +
  geom_text(x=max_sr$sd, y = max_sr$mean + .0002,label="Ponto de tangência", color = "red", check_overlap = T) +
  theme_bw() +
  theme( plot.title = element_text(hjust = .5))

```

```{r}
#| label: mercado tradicional selic mmensal

# pacotes ----

source("variaveis.R")

# alteração variavel

symbols = c("AAPL","MSFT","2222.SR","GOOG","AMZN","NVDA","TSLA","BRK-B")
rfr = selic$SELICMENSALMedia
filePossibilites = paste0("PossibilitiesStockMarket",rfr,".xlsx")
fullPathPossibilites = paste(folder,filePossibilites,sep = "/")


# codigo ----

asset_return = getPricesStockMarket(folder,symbols,from,to)
asset_return_long = returnToLong(asset_return,symbols)

## portfolio igual  ----

w = 1/Nsymbols %>% rep(Nsymbols)

portfolio_return = Return.portfolio(asset_return,weights = w,rebalance_on = "months")
sd_portfolio = sd(portfolio_return$portfolio.returns)
mean_portfolio = mean(portfolio_return$portfolio.returns)
sr_portfolio = SharpeRatio(portfolio_return,Rf=rfr,FUN = "StdDev")

## portfolio optimizado ----

possibilities = loadPossibilites(filePossibilites,fullPathPossibilites,symbols,by)

min_var <- slice_min(possibilities,sd)
max_sr_stockMarket <- slice_max(possibilities,sharpeRatePortfolio)
max_re <- slice_max(possibilities,sharpeRatePortfolio)

w = max_sr_stockMarket[1:Nsymbols] %>% unlist()

portfolio_return_opmitized = Return.portfolio(asset_return,
                                              weights = w,
                                              rebalance_on = "months")

sd_portfolio_optimized = sd(portfolio_return_opmitized$portfolio.returns)
mean_portfolio_optimized = mean(portfolio_return_opmitized$portfolio.returns)
sr_portfolio_optimized = max_sr_stockMarket$sharpeRatePortfolio

# graficos e tabelas ----



## optimização de portfolio e fronteira eficiente ----

pEficientFrontier_StockMarket = possibilities %>%
  ggplot(aes(x = sd, y = mean, color = sharpeRatePortfolio)) +
  geom_point() +
  theme_classic() +
  scale_y_continuous(labels = scales::percent) +
  scale_x_continuous(labels = scales::percent) +
  labs(x = 'Risco',
       y = 'Retorno esperado',
       title = "Optimização de portfolio & Fronteira eficiente",
       colour = "Indice sharpe") +
  geom_point(aes(x = sd,
                 y = mean), data = min_var, color = 'red') +
  geom_point(aes(x = sd,
                 y = mean), data = max_sr_stockMarket, color = 'red') +
  geom_text(x=min_var$sd, y = min_var$mean + .0002,label="Menor variancia", color = "red") +
  geom_text(x=max_sr_stockMarket$sd, y = max_sr_stockMarket$mean + .0002,label="Ponto de tangência", color = "red", check_overlap = T) +
  theme_bw() +
  theme( plot.title = element_text(hjust = .5))

```



## fronteira eficiente

### criptomoeda



```{r}

pEficientFrontier_cryptocurrency

```


### mercado tradicional


```{r}

pEficientFrontier_StockMarket

```



## melhor combinação

### criptomoeda


```{r}

max_sr %>% 
  as.data.frame() %>% 
  gt()

```

```{r}

max_sr_stockMarket %>% 
  as.data.frame() %>% 
  gt()

```

